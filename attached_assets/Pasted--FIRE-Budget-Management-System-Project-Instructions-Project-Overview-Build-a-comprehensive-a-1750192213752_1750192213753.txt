# FIRE Budget Management System - Project Instructions

## Project Overview
Build a comprehensive, automated budget management system designed specifically for families pursuing FIRE (Financial Independence, Retire Early). The application should transform complex financial tracking into a streamlined 15-minute monthly process while maintaining robust income volatility protection and automated wealth-building strategies.

## Core Requirements

### 1. Application Architecture
- **Technology Stack**: Build as a modern web application (React/Vue/Angular) with a backend API (Spring Boot/Python/Node.js)
- **Data Storage**: Local database for privacy (PostgreSQL or similar) with encrypted storage
- **Privacy-First**: All personal financial data must remain local, only anonymized templates in version control
- **User Interface**: Clean, intuitive dashboard with mobile-responsive design

### 2. Essential Features

#### A. Bank Statement Processing
- **Primary Format**: Support CAMT.053 XML import (European bank standard)
- **Automatic Categorization**: ML-based or rule-based transaction categorization
- **Bulk Import**: Handle multiple months of statements at once
- **Error Handling**: Graceful handling of malformed or unexpected data

#### B. Income Volatility Management
- **Dynamic Buffer System**: Automatically maintain €3,000-4,000 emergency fund
- **Income Averaging**: Calculate rolling 3-6 month income averages
- **Volatility Alerts**: Warn when income drops below historical patterns
- **Automatic Adjustments**: Reduce non-essential allocations during low-income periods

#### C. FIRE Strategy Implementation
- **Fixed Allocations**:
  - Pocket Money: fixed amount (e.g.€150) per adult per month, but configurable
  - Essential Expenses: Auto-categorized from bank statements
  - Buffer Maintenance: Priority allocation to maintain emergency fund of configurable amount of months of income
  
- **Excess Distribution System**:
  - Calculate excess = (Income - Fixed Costs - Buffer Requirements)
  - Percentage-based allocation to wealth goals
  - User-configurable distribution percentages
  - Visual representation of allocation flow

#### D. Dashboard & Visualization
- **Monthly Overview**: Income, expenses, savings rate, FIRE progress
- **Trend Analysis**: 12-month rolling charts for all key metrics
- **FIRE Timeline**: Projected retirement date based on current savings rate
- **Goal Tracking**: Visual progress bars for each savings goal
- **Volatility Indicator**: Show income stability metric

#### E. Crypto Integration Framework
- **Multi-Wallet Support**: Track BTC across multiple wallets/exchanges
- **Portfolio Value**: Real-time valuation using public APIs
- **Transaction History**: Import and categorize crypto transactions
- **FIRE Allocation**: Include crypto in wealth-building strategy

#### F. Transfer Instructions Generator
- **Automated Transfer List**: After processing statements, generate exact transfer instructions
- **Account Mapping**: Link each savings goal/category to specific bank accounts
- **Clear Instructions**: Display as actionable list (e.g., "Transfer €523 from Checking to Emergency Fund")
- **Transfer Verification**: Check-off system to confirm each transfer is completed
- **Multi-Currency Support**: Handle transfers between accounts in different currencies
- **Batch Instructions**: Group transfers by source account for efficiency
- **Transfer History**: Track which recommended transfers were actually executed

### 3. User Workflow (15-Minute Monthly Process)

1. **Import Bank Statement** (2 minutes)
   - Drag & drop CAMT.053 file
   - Automatic parsing and categorization

2. **Review Categories** (5 minutes)
   - AI suggests categories for new merchants
   - User confirms or corrects
   - System learns from corrections

3. **Verify Allocations** (3 minutes)
   - Review auto-calculated distributions
   - Adjust if needed (rare)

4. **Execute Transfers** (3 minutes)
   - Review generated transfer instructions
   - Check off each transfer as completed
   - System tracks execution status

5. **Update Goals** (2 minutes)
   - Check progress on savings goals
   - Modify targets if life changes occur

6. **Generate Reports** (2 minutes)
   - Monthly summary for records
   - Export options for tax purposes

### 4. Technical Implementation Details

#### Database Schema
```
- Users (id, name, settings)
- Accounts (id, user_id, name, type, balance, account_number, bank_name)
- Transactions (id, account_id, date, amount, category, merchant)
- Categories (id, name, type, parent_id)
- Goals (id, user_id, name, target_amount, current_amount, linked_account_id)
- Allocations (id, user_id, category_id, percentage)
- BufferHistory (id, user_id, date, amount)
- TransferRecommendations (id, user_id, date, from_account_id, to_account_id, amount, purpose, status)
- TransferExecutions (id, recommendation_id, executed_date, confirmed_by_user)
```

#### Security Requirements
- Local encryption for all financial data
- No cloud sync without explicit user consent
- Secure deletion of imported files after processing
- Audit trail for all financial modifications

### 5. Advanced Features (Phase 2)
- **Tax Optimization**: Track tax-advantaged account contributions
- **Partner Synchronization**: Shared family budget with individual pocket money
- **Investment Tracking**: Connect to brokerage APIs for complete wealth picture
- **Scenario Planning**: "What-if" analysis for major life changes

### 6. Development Priorities
1. Core import and categorization engine
2. Basic dashboard with key metrics
3. FIRE allocation system
4. Income volatility protection
5. Crypto integration
6. Advanced reporting and export

### 7. Testing Requirements
- Unit tests for all financial calculations
- Integration tests for import processes
- UI tests for critical user workflows
- Security audit for data protection
- Performance testing with large transaction volumes

### 8. Documentation Needs
- User guide focusing on 15-minute workflow
- FIRE strategy explanation and customization
- Developer documentation for extending categories
- Privacy and security best practices guide

## Success Criteria
- Users can complete monthly budget review in under 15 minutes
- 95% accuracy in automatic transaction categorization after training
- Zero personal financial data in version control
- Accurate FIRE timeline projections based on historical data
- Seamless handling of income volatility without manual intervention
- Clear, actionable transfer instructions generated after each statement processing
- Users can execute all recommended transfers within 3 minutes using the provided checklist

## Example User Story
"As a FIRE-pursuing family with variable income, I want to import my bank statements and have the system automatically categorize expenses, maintain my emergency buffer, and distribute excess income to my wealth-building goals, so that I can focus on earning rather than tracking."

Build this application with a focus on automation, privacy, and the specific needs of FIRE practitioners who value their time and want to accelerate their journey to financial independence.