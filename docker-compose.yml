# Docker Compose file for VonkFi Production

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vonkfi-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-vonkfi}
      POSTGRES_USER: ${POSTGRES_USER:-vonkfi}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-vonkfi_secure_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database-setup.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database-performance-indexes.sql:/docker-entrypoint-initdb.d/02-indexes.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - vonkfi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-vonkfi} -d ${POSTGRES_DB:-vonkfi}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for caching (optional but recommended for production)
  redis:
    image: redis:7-alpine
    container_name: vonkfi-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-vonkfi_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - vonkfi-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # VonkFi Application
  vonkfi-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: vonkfi-app
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${APP_PORT:-3000}
      
      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-vonkfi}:${POSTGRES_PASSWORD:-vonkfi_secure_password}@postgres:5432/${POSTGRES_DB:-vonkfi}
      
      # Redis configuration (optional)
      REDIS_URL: redis://:${REDIS_PASSWORD:-vonkfi_redis_password}@redis:6379
      
      # Security
      SESSION_SECRET: ${SESSION_SECRET:-your_super_secure_session_secret_change_in_production}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_change_in_production}
      
      # Application settings
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # File upload limits
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}  # 10MB
      
      # Rate limiting
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900000}  # 15 minutes
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}  # requests per window
      
    ports:
      - "${APP_PORT:-3000}:3000"
    volumes:
      - ./uploads:/app/uploads  # For CAMT file uploads
      - ./logs:/app/logs        # Application logs
    networks:
      - vonkfi-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: vonkfi-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # SSL certificates
      - ./logs/nginx:/var/log/nginx
    networks:
      - vonkfi-network
    depends_on:
      - vonkfi-app
    profiles:
      - production  # Only start with --profile production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  vonkfi-network:
    driver: bridge