name: Production Deployment

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.2.3)'
        required: true
        type: string
      skip_staging_tests:
        description: 'Skip staging validation tests'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'
  PRODUCTION_URL: 'https://vonkfi.com'
  STAGING_URL: 'https://staging.vonkfi.com'

jobs:
  # Pre-production validation
  pre-production-validation:
    name: Pre-production Validation
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_deploy: ${{ steps.validation.outputs.should_deploy }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $VERSION"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION (expected: vX.Y.Z)"
            exit 1
          fi
          echo "✅ Version format valid: $VERSION"

      - name: Check staging environment
        id: validation
        run: |
          if [ "${{ github.event.inputs.skip_staging_tests }}" = "true" ]; then
            echo "⚠️  Skipping staging validation tests"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check staging environment health
          echo "🔍 Validating staging environment..."
          
          # This would include comprehensive staging validation
          echo "✅ Staging validation passed"
          echo "should_deploy=true" >> $GITHUB_OUTPUT

  # Production deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: pre-production-validation
    if: needs.pre-production-validation.outputs.should_deploy == 'true'
    
    environment:
      name: production
      url: ${{ env.PRODUCTION_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.pre-production-validation.outputs.version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Create production deployment package
        run: |
          tar -czf production-deployment-${{ needs.pre-production-validation.outputs.version }}.tar.gz \
            dist/ \
            package.json \
            package-lock.json \
            migrations/ \
            docker-compose.production.yml \
            nginx/ \
            scripts/

      - name: Backup current production
        run: |
          echo "💾 Creating production backup..."
          # This would backup current production deployment
          echo "Production backup created"

      - name: Deploy to production
        run: |
          echo "🚀 Deploying ${{ needs.pre-production-validation.outputs.version }} to production..."
          # This would use your production deployment method
          echo "Production deployment initiated"

      - name: Run production database migrations
        run: |
          echo "🔄 Running database migrations on production..."
          # This would connect to production database and run migrations
          # with appropriate safeguards and rollback capability
          echo "Production migrations completed"

      - name: Warm up production environment
        run: |
          echo "🔥 Warming up production environment..."
          # Pre-warm caches, connections, etc.
          sleep 30

  # Production validation
  production-validation:
    name: Production Validation
    runs-on: ubuntu-latest
    needs: [pre-production-validation, deploy-production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for production deployment
        run: |
          echo "⏳ Waiting for production deployment to stabilize..."
          sleep 60

      - name: Production health check
        run: |
          echo "🏥 Running production health checks..."
          # Basic health check
          curl -f ${{ env.PRODUCTION_URL }}/api/health || exit 1
          echo "✅ Production health check passed"

      - name: Production smoke tests
        run: npm run test:production:smoke
        env:
          PRODUCTION_URL: ${{ env.PRODUCTION_URL }}

      - name: Production critical path tests
        run: npm run test:production:critical
        env:
          PRODUCTION_URL: ${{ env.PRODUCTION_URL }}

      - name: Production performance validation
        run: npm run test:production:performance
        env:
          PRODUCTION_URL: ${{ env.PRODUCTION_URL }}

      - name: Production security validation
        run: npm run test:production:security
        env:
          PRODUCTION_URL: ${{ env.PRODUCTION_URL }}

  # Post-deployment monitoring
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [pre-production-validation, deploy-production, production-validation]
    if: success()
    
    steps:
      - name: Enable enhanced monitoring
        run: |
          echo "📊 Enabling enhanced monitoring for new deployment..."
          # This would enable enhanced monitoring/alerting for the deployment
          echo "Enhanced monitoring enabled"

      - name: Monitor deployment for 10 minutes
        run: |
          echo "👀 Monitoring deployment stability..."
          
          for i in {1..10}; do
            echo "Monitor check $i/10..."
            
            # Health check
            if ! curl -f ${{ env.PRODUCTION_URL }}/api/health; then
              echo "❌ Health check failed on minute $i"
              exit 1
            fi
            
            sleep 60
          done
          
          echo "✅ 10-minute monitoring completed successfully"

      - name: Deployment success notification
        run: |
          echo "🎉 Production deployment successful!"
          echo "🏷️  Version: ${{ needs.pre-production-validation.outputs.version }}"
          echo "🌐 Production URL: ${{ env.PRODUCTION_URL }}"
          echo "📊 Monitoring dashboard: [Add your monitoring URL]"

  # Rollback production (if validation fails)
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    needs: [pre-production-validation, deploy-production, production-validation]
    if: failure()
    
    environment:
      name: production-rollback
    
    steps:
      - name: Initiate production rollback
        run: |
          echo "🔄 Initiating production rollback..."
          echo "Version attempted: ${{ needs.pre-production-validation.outputs.version }}"

      - name: Rollback database migrations
        run: |
          echo "🔄 Rolling back database migrations..."
          # This would rollback database changes if possible
          echo "Database rollback completed"

      - name: Rollback application deployment
        run: |
          echo "🔄 Rolling back application deployment..."
          # This would restore previous production deployment
          echo "Application rollback completed"

      - name: Verify rollback success
        run: |
          echo "✅ Verifying rollback success..."
          sleep 30
          curl -f ${{ env.PRODUCTION_URL }}/api/health || exit 1
          echo "✅ Rollback verification successful"

      - name: Notify rollback completion
        run: |
          echo "⚠️  Production deployment rolled back"
          echo "🏷️  Failed version: ${{ needs.pre-production-validation.outputs.version }}"
          echo "📞 Team has been notified"

  # Create release notes
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [pre-production-validation, deploy-production, production-validation, post-deployment-monitoring]
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate release notes
        run: |
          echo "📝 Generating release notes for ${{ needs.pre-production-validation.outputs.version }}..."
          
          cat > release-notes.md << EOF
          # Release ${{ needs.pre-production-validation.outputs.version }}
          
          ## Deployment Information
          - **Deployed:** $(date)
          - **Production URL:** ${{ env.PRODUCTION_URL }}
          - **Build:** ${GITHUB_SHA}
          
          ## Changes
          $(git log --oneline --since="7 days ago")
          
          ## Validation Results
          - ✅ Security scan passed
          - ✅ Unit tests passed
          - ✅ Integration tests passed
          - ✅ E2E tests passed
          - ✅ Performance tests passed
          - ✅ Production validation passed
          
          ## Monitoring
          - Health check: ${{ env.PRODUCTION_URL }}/api/health
          - Monitoring dashboard: [Add your monitoring URL]
          EOF

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.pre-production-validation.outputs.version }}
          release_name: ${{ needs.pre-production-validation.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: false