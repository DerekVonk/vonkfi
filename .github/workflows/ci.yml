name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Job 1: Code Quality & Security Scanning
  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run dependency vulnerability scan
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: |
          npx audit-ci --config ./ci/audit-ci.json
        continue-on-error: true

      - name: Run ESLint security scan
        run: |
          npx eslint . --ext .ts,.tsx,.js,.jsx \
            --config ./ci/eslint-security.config.js \
            --format json \
            --output-file eslint-security-report.json
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            eslint-security-report.json
            npm-audit.json

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: security-scan
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}-alpine
        env:
          POSTGRES_DB: vonkfi_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U test; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL... ($i/30)"
            sleep 2
          done

      - name: Setup test environment
        run: |
          cp .env.test.example .env.test
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/vonkfi_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vonkfi_test

      - name: Run unit tests with coverage
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vonkfi_test
          CI: true

      - name: Check coverage thresholds
        run: |
          npm run test:coverage:check

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            coverage/
            test-results.xml

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}-alpine
        env:
          POSTGRES_DB: vonkfi_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup integration test environment
        run: |
          cp .env.integration.example .env.integration
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/vonkfi_test" >> .env.integration

      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vonkfi_test

      - name: Seed test data
        run: npm run db:seed:test
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vonkfi_test

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vonkfi_test

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            integration-test-results.xml
            logs/

  # Job 4: End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}-alpine
        env:
          POSTGRES_DB: vonkfi_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Setup E2E test environment
        run: |
          cp .env.e2e.example .env.e2e
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/vonkfi_test" >> .env.e2e

      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vonkfi_test

      - name: Seed E2E test data
        run: npm run db:seed:e2e
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vonkfi_test

      - name: Start application
        run: |
          npm start &
          npx wait-on http://localhost:3000
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vonkfi_test

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/

  # Job 5: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}-alpine
        env:
          POSTGRES_DB: vonkfi_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Setup performance test environment
        run: |
          cp .env.performance.example .env.performance
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/vonkfi_test" >> .env.performance

      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vonkfi_test

      - name: Seed performance test data
        run: npm run db:seed:performance
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vonkfi_test

      - name: Start application
        run: |
          npm start &
          npx wait-on http://localhost:3000
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vonkfi_test

      - name: Run performance tests
        run: npm run test:performance

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            performance-results/
            artillery-reports/

  # Job 6: Build & Security Validation
  build-and-validate:
    name: Build & Security Validation
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run check

      - name: Build application
        run: npm run build

      - name: Run security linting
        run: |
          npx eslint . --ext .ts,.tsx,.js,.jsx \
            --config ./ci/eslint-security.config.js

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            build/

  # Job 7: Database Migration Tests
  migration-tests:
    name: Database Migration Tests
    runs-on: ubuntu-latest
    needs: security-scan
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}-alpine
        env:
          POSTGRES_DB: vonkfi_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test database migrations
        run: npm run test:migrations
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vonkfi_test

      - name: Test migration rollbacks
        run: npm run test:migrations:rollback
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vonkfi_test

      - name: Upload migration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: migration-test-results
          path: |
            migration-test-results.json
            schema-validation-results.json

  # Job 8: Deployment Readiness Check
  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [build-and-validate, e2e-tests, migration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Validate deployment readiness
        run: |
          echo "Checking deployment readiness..."
          
          # Check if all required artifacts exist
          required_artifacts=(
            "build-artifacts"
            "unit-test-results"
            "integration-test-results"
            "e2e-test-results"
            "migration-test-results"
          )
          
          for artifact in "${required_artifacts[@]}"; do
            if [ ! -d "$artifact" ]; then
              echo "❌ Missing required artifact: $artifact"
              exit 1
            fi
          done
          
          echo "✅ All required artifacts present"
          echo "✅ Deployment readiness check passed"

      - name: Create deployment summary
        run: |
          cat > deployment-summary.md << EOF
          # Deployment Summary
          
          ## Test Results
          - ✅ Security scan completed
          - ✅ Unit tests passed with coverage
          - ✅ Integration tests passed
          - ✅ E2E tests passed
          - ✅ Migration tests passed
          - ✅ Build validation passed
          
          ## Deployment Artifacts
          - Application build: Ready
          - Database migrations: Validated
          - Test coverage: Above threshold
          
          ## Next Steps
          - Ready for staging deployment
          - Performance tests completed (if main branch)
          - All quality gates passed
          EOF

      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.md

  # Notification job
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deployment-readiness]
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.deployment-readiness.result == 'success' }}
        run: |
          echo "🎉 All tests passed! Ready for deployment."
          
      - name: Notify failure
        if: ${{ needs.deployment-readiness.result == 'failure' }}
        run: |
          echo "❌ Pipeline failed. Check the logs for details."
          exit 1